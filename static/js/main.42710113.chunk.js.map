{"version":3,"sources":["TodoItem.js","Dashboard.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","state","todos","dispatch","deleteTodo","todoId","type","payload","doneTodo","editTodo","todoTitle","props","el","useState","edit","setEdit","title","inputTitle","setInputTitle","value","onChange","e","target","onClick","id","className","done","width","height","viewBox","fill","xmlns","d","fill-rule","addTodo","todo","newTodo","setNewTodo","map","key","update","App","Date","toLocaleDateString","toLocaleTimeString","Boolean","window","location","hostname","match","initialState","action","Math","random","newTodos","filter","doneTodos","editTodos","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAmDA,IAUeA,eAVS,SAACC,GAAD,MAAY,CAChCC,MAAOD,EAAMC,UAGU,SAACC,GAAD,MAAe,CACtCC,WAAY,SAACC,GAAD,OAAYF,EAAS,CAACG,KAAM,cAAeC,QAASF,KAChEG,SAAU,SAACH,GAAD,OAAYF,EAAS,CAACG,KAAM,YAAaC,QAASF,KAC5DI,SAAU,SAACJ,EAAQK,GAAT,OAAuBP,EAAS,CAACG,KAAM,YAAaC,QAAS,CAACF,SAAQK,mBAGrEV,EA1Df,SAAkBW,GAAQ,IACfC,EAAMD,EAANC,GADc,EAEGC,oBAAS,GAFZ,mBAEdC,EAFc,KAERC,EAFQ,OAGeF,mBAASD,EAAGI,OAH3B,mBAGdC,EAHc,KAGFC,EAHE,KAmBrB,OAAIJ,EAEI,6BACI,2BAAOK,MAAOF,EAAYG,SAjBhB,SAAAC,GAClBH,EAAcG,EAAEC,OAAOH,UAiBf,4BAAQI,QAVH,WACbZ,EAAMF,SAASG,EAAGY,GAAIP,GACtBC,EAAc,IACdH,GAAQ,KAOA,SAKJ,yBAAKU,UAAU,aACTb,EAAGc,KAAQ,yCAAS,6BAAMd,EAAGI,QAAsBJ,EAAGI,MACxD,4BAAQS,UAAU,iCAAiCF,QArB5C,WACfR,GAAQ,KAoBA,QACA,4BAAQU,UAAU,8BAA8BF,QAAS,kBAAMZ,EAAMP,WAAWQ,EAAGY,MAC/E,yBAAKG,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYJ,UAAU,cACvDK,KAAK,eAAeC,MAAM,8BAC3B,0BACIC,EAAE,oKACN,0BAAMC,YAAU,UACVD,EAAE,iPAGbpB,EAAGc,KACF,4BAAQD,UAAU,iCAAiCF,QAAS,kBAAMZ,EAAMH,SAASI,EAAGY,MAApF,UADU,4BAAQC,UAAU,iCAAiCF,QAAS,kBAAMZ,EAAMH,SAASI,EAAGY,MAApF,YCN9B,IAUexB,eAVS,SAACC,GAAD,MAAY,CAChCC,MAAOD,EAAMC,UAGU,SAACC,GAAD,MAAe,CACtC+B,QAAS,SAACC,GAAD,OAAUhC,EAAS,CAACG,KAAM,WAAYC,QAAS4B,QAK7CnC,EA1Cf,SAAmBW,GAAQ,IAAD,EAEQE,mBAAS,IAFjB,mBAEfuB,EAFe,KAENC,EAFM,KASfnC,EAASS,EAATT,MAEP,OACI,6BACKA,EAAMoC,KAAI,SAAA1B,GAAE,OAAI,wBAAIa,UAAU,kBAAkBc,IAAK3B,EAAGY,IAAI,kBAAC,EAAD,CAAUZ,GAAIA,EAAI4B,OAAQ7B,EAAM6B,aAY7F,2BAAOrB,MAAOiB,EAAShB,SAAU,SAACC,GAAD,OAAOgB,EAAWhB,EAAEC,OAAOH,QAAQb,KAAK,SACzE,4BAAQmB,UAAU,yBAAyBF,QAtB1B,WACrBZ,EAAMuB,QAAQE,GACdC,EAAW,MAoBP,eCZGI,MAdf,WACI,OACI,yBAAKhB,UAAU,OAEX,+BAAQ,IAAIiB,MAAQC,sBACpB,2BAAG,+BAAQ,IAAID,MAAQE,uBACvB,6BACA,4BAAI,uBAAGnB,UAAU,iCAAb,cAEJ,kBAAC,EAAD,QCFQoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCClBAC,EAAe,CACjBhD,MAAO,CACH,CACIc,MAAO,UACPU,MAAM,EACNF,GAAI,GACL,CACCR,MAAO,UACPU,MAAM,EACNF,GAAI,GACL,CACCR,MAAO,UACPU,MAAM,EACNF,GAAI,GACL,CACCR,MAAO,UACPU,MAAM,EACNF,GAAI,KAsDDW,EAjDF,WAAmC,IAAlClC,EAAiC,uDAAzBiD,EAAcC,EAAW,uCAC3C,OAAQA,EAAO7C,MAEX,IAAK,WACD,OAAO,2BACAL,GADP,IAEIC,MAAM,GAAD,mBAAMD,EAAMC,OAAZ,CAAmB,CAACc,MAAOmC,EAAO5C,QAASmB,MAAM,EAAOF,GAAI4B,KAAKC,cAI9E,IAAK,cACD,IAAMC,EAAWrD,EAAMC,MAAMqD,QAAO,SAAA3C,GAAE,OAAIA,EAAGY,KAAO2B,EAAO5C,WAE3D,OAAO,2BACAN,GADP,IAEIC,MAAOoD,IAGf,IAAK,YACD,IAAME,EAAYvD,EAAMC,MAAMoC,KAAI,SAAA1B,GAI9B,OAHIA,EAAGY,KAAO2B,EAAO5C,UACjBK,EAAGc,MAAQd,EAAGc,MAEXd,KAGX,OAAO,2BACAX,GADP,IAEIC,MAAOsD,IAGf,IAAK,YACD,IAAMC,EAAYxD,EAAMC,MAAMoC,KAAI,SAAA1B,GAI9B,OAHIA,EAAGY,KAAO2B,EAAO5C,QAAQF,SACzBO,EAAGI,MAAQmC,EAAO5C,QAAQG,WAEvBE,KAGX,OAAO,2BACAX,GADP,IAEIC,MAAOuD,IAGf,QACI,OAAOxD,IC3DJyD,EAJDC,sBAAYxB,EAAMyB,8BAC5BC,8BCGJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,QAGRO,SAASC,eAAe,SHqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.42710113.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {connect} from \"react-redux\";\n\nfunction TodoItem(props) {\n    const {el} = props;\n    const [edit, setEdit] = useState(false);\n    const [inputTitle, setInputTitle] = useState(el.title);\n\n    const inputOnChange = e => {\n        setInputTitle(e.target.value)\n    };\n\n    const handleEdit = () => {\n        setEdit(true);\n    }\n\n    const onUpdate = () => {\n        props.editTodo(el.id, inputTitle);\n        setInputTitle('')\n        setEdit(false);\n    }\n\n    if (edit) {\n        return (\n            <div>\n                <input value={inputTitle} onChange={inputOnChange}/>\n                <button onClick={onUpdate}>Save</button>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"container\">\n                {(el.done) ? <span> ✅ <del>{el.title}</del></span> : el.title}\n                <button className=\"btn btn-outline-warning btn-sm\" onClick={handleEdit}>Edit</button>\n                <button className=\"btn btn-outline-dark btn-sm\" onClick={() => props.deleteTodo(el.id)}>\n                    <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash\"\n                         fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n                        <path fill-rule=\"evenodd\"\n                              d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n                    </svg>\n                </button>\n                {(!el.done) ? <button className=\"btn btn-outline-warning btn-sm\" onClick={() => props.doneTodo(el.id)}>Done</button> :\n                    <button className=\"btn btn-outline-warning btn-sm\" onClick={() => props.doneTodo(el.id)}>Undone</button>}\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => ({\n    todos: state.todos\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    deleteTodo: (todoId) => dispatch({type: 'DELETE_TODO', payload: todoId}),\n    doneTodo: (todoId) => dispatch({type: 'DONE_TODO', payload: todoId}),\n    editTodo: (todoId, todoTitle) => dispatch({type: 'EDIT_TODO', payload: {todoId, todoTitle}})\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoItem);","import React, {useState} from 'react';\nimport TodoItem from \"./TodoItem\";\nimport {connect} from \"react-redux\";\nimport './App.css';\n\nfunction Dashboard(props) {\n\n    const [newTodo, setNewTodo] = useState('')\n\n    const addButtonHandler = () => {\n        props.addTodo(newTodo)\n        setNewTodo('')\n    }\n\n    const {todos} = props;\n\n    return (\n        <div>\n            {todos.map(el => <li className=\"list-group-item\" key={el.id}><TodoItem el={el} update={props.update}/></li>)}\n\n\n            {/*{todos.map(el =>*/}\n            {/*    <ul><li>*/}\n            {/*        {(el.done) ? <span> ✅ <del>{el.title}</del></span> : el.title}*/}\n            {/*        <button onClick={() => props.deleteTodo(el.id)}>delete</button>*/}\n            {/*        {(!el.done) ? <button onClick={() => props.doneTodo(el.id)}>Done</button> :*/}\n            {/*            <button onClick={() => props.doneTodo(el.id)}>Undone</button>}*/}\n\n            {/*    </li></ul>)}*/}\n\n            <input value={newTodo} onChange={(e) => setNewTodo(e.target.value)} type='text'/>\n            <button className=\"btn btn-success btn-sm\" onClick={addButtonHandler}>Add new</button>\n\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    todos: state.todos\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    addTodo: (todo) => dispatch({type: 'TODO_ADD', payload: todo}),\n    // deleteTodo: (todoId) => dispatch({type: 'DELETE_TODO', payload: todoId}),\n    // doneTodo: (todoId) => dispatch({type: 'DONE_TODO', payload: todoId}),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n\n","import React from 'react';\nimport './App.css';\nimport Dashboard from \"./Dashboard\";\n\n\nfunction App() {\n    return (\n        <div className='App'>\n\n            <span>{(new Date()).toLocaleDateString()}</span>\n            <p><span>{(new Date()).toLocaleTimeString()}</span></p>\n            <br/>\n            <h4><p className=\"font-weight-bold text-success\">TODO LIST</p></h4>\n\n            <Dashboard/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    todos: [\n        {\n            title: '1 to do',\n            done: true,\n            id: 1,\n        }, {\n            title: '2 to do',\n            done: false,\n            id: 2,\n        }, {\n            title: '3 to do',\n            done: false,\n            id: 3,\n        }, {\n            title: '4 to do',\n            done: false,\n            id: 4,\n        }\n    ],\n};\n\nconst todo = (state = initialState, action) => {\n    switch (action.type) {\n\n        case 'TODO_ADD':\n            return {\n                ...state,\n                todos: [...state.todos, {title: action.payload, done: false, id: Math.random()}]\n            };\n\n\n        case 'DELETE_TODO':\n            const newTodos = state.todos.filter(el => el.id !== action.payload)\n\n            return {\n                ...state,\n                todos: newTodos\n            };\n\n        case 'DONE_TODO':\n            const doneTodos = state.todos.map(el => {\n                if (el.id === action.payload) {\n                    el.done = !el.done;\n                }\n                return el;\n            })\n\n            return {\n                ...state,\n                todos: doneTodos\n            }\n\n        case 'EDIT_TODO':\n            const editTodos = state.todos.map(el => {\n                if (el.id === action.payload.todoId) {\n                    el.title = action.payload.todoTitle;\n                }\n                return el;\n            })\n\n            return {\n                ...state,\n                todos: editTodos\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport default todo;\n","import {createStore, applyMiddleware} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport todo from './reducer';\n\nconst store = createStore(todo, composeWithDevTools(\n    applyMiddleware(),\n));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}